---
import LayoutWithHeaderAndFooter from "./LayoutWithHeaderAndFooter.astro";
import { SITE_IMAGE } from "../config";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";
import BlogPostToc from "@components/BlogPostToc.astro";

export interface Props {
  content: CollectionEntry<'blog'>;
  headings: MarkdownHeading[];
}

const {
  content: {
    data: {
      title,
      description,
      pubDate,
      updatedDate,
      image,
      tags,
    },
    body
  },
  headings
} = Astro.props;
---

<LayoutWithHeaderAndFooter
  title={title}
  description={description}
  image={image.src.src ?? SITE_IMAGE}
>
  <article
    class="pt-2 mx-auto text-justify max-w-screen-xl flex flex-col items-stretch"
    data-pagefind-body>
    <div class="flex flex-col items-center">
      {
        image && (
          <Image
            src={image.src}
            alt={image.alt}
            format="webp"
            data-pagefind-meta="image[src], image_alt[alt]"
            class="w-full mb-2 object-contain rounded-xl"
          />
        )
      }
      <h1 class="mb-1 font-bold text-2xl md:text-4xl text-center leading-tight">{title}</h1>
      <p class="m-0 text-sm">
        {
          pubDate && (
            <span>
              Published on <time datetime={pubDate.toISOString()}>{pubDate.toLocaleDateString()}</time>
            </span>
          )
        }
        {
          updatedDate && (
            <span>
              - Last updated on <time datetime={updatedDate.toISOString()}>{updatedDate.toLocaleDateString()}</time>
            </span>
          )
        }
      </p>
      {
        tags && tags.length > 0 && (
          <div class="flex flex-row flex-wrap gap-1 my-2">
            {tags.map((tag) => (
              <span
                class:list={[
                  tag.colorClass,
                  "text-sm text-slate-100 p-1 rounded-xl",
                ]}
              >
                #{tag.name}
              </span>
            ))}
          </div>
        )
      }
    </div>
    <div class="flex flex-col xl:flex-row gap-x-8 gap-y-2 justify-center items-center">
      <div class="flex-auto"></div>
      <BlogPostToc headings={headings} />
      <section class="prose prose-sm md:prose-base prose-zinc dark:prose-invert prose-img:rounded-xl prose-pre:w-[95vw] prose-pre:max-w-full
        prose-h1:scroll-m-24 prose-h2:scroll-m-24 prose-h3:scroll-m-24 prose-h4:scroll-m-24 prose-h5:scroll-m-24 prose-h6:scroll-m-24">
        <hr class="not-prose mt-2 xl:mt-0 mb-4 dark:border-slate-600" />
        <slot />
        <hr class="not-prose my-4 dark:border-slate-600" />
        <script
          id="comments-section"
          src="https://giscus.app/client.js"
          data-repo="snyssen/personal-website"
          data-repo-id="R_kgDOKXZA1w"
          data-category="Announcements"
          data-category-id="DIC_kwDOKXZA184Cc6jN"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="top"
          data-theme="preferred_color_scheme"
          data-lang="en"
          data-loading="lazy"
          crossorigin="anonymous"
          async>
        </script>
      </section>
    </div>
  </article>
</LayoutWithHeaderAndFooter>

<style is:global>
  div.expressive-code {
    /* takes screen width and remove .p-4 x2 from it */
    max-width: calc(100vw - (2*1rem));
  }
</style>

<script is:inline>
  const updateCommentsSectionConfig = (config) => {
    const iframe = document.querySelector('iframe.giscus-frame');
    if (!iframe) return;
    iframe.contentWindow.postMessage({ giscus: { setConfig: config} }, 'https://giscus.app');
  };
  
  const setCommentsThemeFromLocalStorage = () => {
    updateCommentsSectionConfig({
      theme: localStorage.getItem("color-theme")
    });
  };

  // if color-theme is already set in localstorage,
  // set comment section theme to same value
  if (("color-theme" in localStorage)) {
    // first change script itself since it might not have loaded yet
    document
      .getElementById("comments-section")
      .setAttribute("data-theme", localStorage.getItem("color-theme"));
    // then send config in case it was already loaded
    setCommentsThemeFromLocalStorage();
  }

  // React to click events on theme toggle
  document.getElementById("theme-toggle").addEventListener('click', () => {
    // use a timeout so actual theme toggle can take place
    setTimeout(setCommentsThemeFromLocalStorage);
  });
</script>

<script>
  addIntersectionObserver();

  function addIntersectionObserver() {
    const observer = new IntersectionObserver((intersectionEntries) => {
      for (let entry of intersectionEntries) {
        const { id } = entry.target;
        const tocHeadingEl = document.querySelector(`#toc a[href="#${id}"]`);
        if (!tocHeadingEl) return;
        if (entry.isIntersecting) {
          document.querySelectorAll("#toc a").forEach((e) => e.classList.remove("current-heading"));
          tocHeadingEl.classList.add("current-heading");
        }
      }
    }, {
      threshold: 1,
      rootMargin : "0px 0px -33%"
    });

    document
      .querySelectorAll("article section :is(h2,h3,h4)")
      .forEach((heading) => {
        observer.observe(heading)
      });
  }
</script>
