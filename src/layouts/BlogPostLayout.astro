---
import LayoutWithHeaderAndFooter from "./LayoutWithHeaderAndFooter.astro";
import { SITE_IMAGE } from "../config";
import { Image } from "@astrojs/image/components";

export interface Props {
  content: {
    title: string;
    description: string;
    pubDate?: string;
    updatedDate?: string;
    heroImage?: string;
    heroImageAlt?: string;
    tags?: [
      {
        name: string;
        colorClass: string;
      }
    ];
  };
  rawContent: () => string;
}

const {
  content: {
    title,
    description,
    pubDate,
    updatedDate,
    heroImage,
    heroImageAlt,
    tags,
  },
  rawContent,
} = Astro.props;
---

<LayoutWithHeaderAndFooter
  title={title}
  description={description}
  image={heroImage ?? SITE_IMAGE}
>
  <article
    class="p-2 mx-auto text-justify prose prose-zinc dark:prose-invert prose-img:rounded-xl prose-pre:w-[95vw] prose-pre:max-w-full"
  >
    {
      heroImage && (
        <Image
          src={heroImage}
          alt={heroImageAlt ?? ""}
          aspectRatio="16:9"
          width={1920}
          format="webp"
          class="w-full mb-2"
        />
      )
    }
    <h1 class="not-prose mb-1">{title}</h1>
    <p class="not-prose m-0 text-sm">
      {
        pubDate && (
          <span>
            Published on <time datetime={pubDate}>{pubDate}</time>
          </span>
        )
      }
      {
        updatedDate && (
          <span>
            - Last updated on <time datetime={updatedDate}>{updatedDate}</time>
          </span>
        )
      }
    </p>
    {
      tags && tags.length > 0 && (
        <div class="flex flex-row flex-wrap gap-1 my-2">
          {tags.map((tag) => (
            <span
              class:list={[
                tag.colorClass,
                "text-sm text-slate-100 p-1 rounded-xl",
              ]}
            >
              #{tag.name}
            </span>
          ))}
        </div>
      )
    }
    <hr class="not-prose mt-2 mb-4" />
    <slot />
  </article>

  <lunr-document>
    <lunr-field name="title" value={title}></lunr-field>
    <lunr-field name="description" value={description}></lunr-field>
    {
      tags && tags.length > 0 && (
        <lunr-field name="tag" value={tags.map((t) => t.name).join(" ")} />
      )
    }
    <lunr-text name="content">{rawContent()}</lunr-text>
  </lunr-document>
</LayoutWithHeaderAndFooter>
